import numpy as np
from numpy.linalg import inv
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def missile_guidance(r, v, vM):
    N = 3
    R2 = np.dot(r, r)
    OmL = np.cross(r, v) / R2  # 회전율 벡터
    a_cmd = N * np.cross(OmL, vM) # 회전율과 미사일 속도 벡터의 외적으로 가속명령 계산

    return a_cmd


def seeker_ekf_tu(xhat, Phat, a_cmd, Qd, dt):
        F = np.array([[1, 0, 0, dt, 0, 0],
                  [0, 1, 0, 0, dt, 0],
                  [0, 0, 1, 0, 0, dt],
                  [0, 0, 0, 1, 0, 0],
                  [0, 0, 0, 0, 1, 0],
                  [0, 0, 0, 0, 0, 1]])

    G = np.array([[0, 0, 0],
                  [0, 0, 0],
                  [0, 0, 0],
                  [-dt, 0, 0],
                  [0, -dt, 0],
                  [0, 0, -dt]])

    Gw = np.array([[0, 0, 0],
                   [0, 0, 0],
                   [0, 0, 0],
                   [1, 0, 0],
                   [0, 1, 0],
                   [0, 0, 1]])

    # time update
    xbar = F @ xhat + G @ a_cmd
    Pbar = F @ Phat @ F.T + Gw @ Qd @ Gw.T

    return xbar, Pbar



def missile_dyn(r, v, a_cmd, dt):
   
    # One-step propagation
    r_next = r + dt * v
    v_next = v + dt * a_cmd

    the = np.arctan2(-v[2], np.sqrt(v[0] ** 2 + v[1] ** 2))
    psi = np.arctan2(v[1], v[0])
    cp = np.cos(psi)
    ct = np.cos(the)
    sp = np.sin(psi)
    st = np.sin(the)
    Cbn = np.array([[cp * ct, sp * ct, -st],
                    [-sp, cp, 0],
                    [cp * st, sp * st, ct]])

    return r_next, v_next, Cbn


def target_dyn(r, v, Qd, dt, status):
  
    # Process noise
    if status == 'sy':
        w = np.sqrt(Qd) @ np.random.randn(3, 1)
    else:
        w = np.zeros((3, 1))
    
    r_next = r + dt * v  # v는 (3,) 차원
    v_next = v + w.flatten()  # (3,1) -> (3,)
    
    return r_next, v_next


def seeker_meas(r_rel, Cbn, Rd, status):
  
    rb = np.dot(Cbn, r_rel)

    if status == 'sy':
        v = np.sqrt(Rd) @ np.random.randn(3, 1)
    else:
        v = np.zeros((3, 1))

    R = np.sqrt(np.dot(rb.T, rb)) + v[0][0]  # 측정 거리 R
    the_g = np.arctan2(-rb[2], np.sqrt(rb[0]**2 + rb[1]**2)) + v[1][0]  # 고각
    psi_g = np.arctan2(rb[1], rb[0]) + v[2][0] # 방위각

    z = np.array([R, the_g, psi_g])

    return z.squeeze() # `.squeeze()`를 사용하여 차원 축소를 통해 (3,) 형태로 반환합니다.

def seeker_ekf_mu(z, xbar, Pbar, Rd, Cbn):
  
    rb = np.dot(Cbn, xbar[:3])
    r1, r2, r3 = rb
    r_mag = np.sqrt(np.dot(rb.T, rb))
    Rtmp = (r1**2 + r2**2) * np.sqrt(r1**2 + r2**2) + r3**2 * np.sqrt(r1**2 + r2**2)
    dhdrb = np.array([
        [r1 / r_mag, r2 / r_mag, r3 / r_mag],
        [r1 * r3 / Rtmp, r2 * r3 / Rtmp, -np.sqrt(r1**2 + r2**2) / r_mag**2],
        [-r2 / (r1**2 + r2**2), r1 / (r1**2 + r2**2), 0]
    ])
    
    H = np.hstack([np.dot(dhdrb, Cbn), np.zeros((3, 3))])
    r_rel = xbar[:3]
    zhat = seeker_meas(r_rel, Cbn, Rd, 'kf')

    S = np.dot(H, np.dot(Pbar, H.T)) + Rd * np.eye(3)
    K = np.dot(np.dot(Pbar, H.T), inv(S))
    xhat = xbar + np.dot(K, (z - zhat))
    Phat = Pbar - np.dot(np.dot(K, S), K.T)

    return xhat, Phat, zhat, S


dt = 0.01
# process noise, measurement noise
Qc = (5**2) * np.diag([1, 1, 0])
Qd = Qc * dt
Rd = np.diag([5**2,  (np.pi/180)**2, (np.pi/180)**2])
############## target initial state ###############
rT0 = np.array([20000, 30000, 0])
VT = 20  # target speed
thetaT = 0
psiT = 120 * np.pi/180
cp = np.cos(psiT)
ct = np.cos(thetaT)
sp = np.sin(psiT)
st = np.sin(thetaT)
vT0 = VT * np.array([cp*ct, sp*ct, -st])  # 1차원 배열 (3,)

P0 = np.diag([200**2, 200**2, 200**2, 10**2, 10**2, 0])
rvT0 = np.concatenate((rT0, vT0))


############# missile initial state ###############
rM0 = np.array([0, 0, -500])
VM = 270  # missile speed
thetaM = 0; psiM = 0
cp = np.cos(psiM); ct = np.cos(thetaM)
sp = np.sin(psiM); st = np.sin(thetaM)
vM0 = VM * np.array([cp*ct, sp*ct, -st])
rvM0 = np.concatenate((rM0, vM0))


############# EKF initialization ###################
xhat = (rvT0 - rvM0) + (np.sqrt(P0) @ np.random.randn(6, 1)).flatten()
Phat = np.diag([200**2, 200**2, 200**2, 10**2, 10**2, 10**2])


############# initial guidance law #################
rhat = xhat[:3].flatten() 
vhat = xhat[3:6].flatten() 
a_cmd0 = missile_guidance(rhat, vhat, vM0)


# 컬렉션 초기화
POST = []
POSM = []
XR = []
XV = []
XHAT = []
PHAT = []
Z = []
ZHAT = []
SBAR = []
ACMD = []
TIME = []


################# EKF propagation ###################
for k in range(1, 20001):
    t = dt * k
    
    # Time Update (TU)
    xbar, Pbar = seeker_ekf_tu(xhat, Phat, a_cmd0, Qd, dt)
    
    # 미사일 동역학
    rM, vM, Cbn = missile_dyn(rM0, vM0, a_cmd0, dt)
    
    # 타겟 동역학
    rT, vT = target_dyn(rT0, vT0, Qd, dt, 'sy')
    
    # 추적기 측정
    r_rel = rT - rM
    z = seeker_meas(r_rel, Cbn, Rd, 'sy')
    
    # Measurement Update (MU)
    xhat, Phat, zhat, S = seeker_ekf_mu(z, xbar, Pbar, Rd, Cbn)
    
    # 가이던스 법칙
    rhat = xhat[:3].flatten() 
    vhat = xhat[3:6].flatten() 
    a_cmd = missile_guidance(rhat, vhat, vM)
    a_cmd_b = np.dot(Cbn, a_cmd)  # 몸체 좌표계에서의 가속도 명령
    
    # 데이터 수집
    XR.append(rT - rM)
    XV.append(vT - vM)
    XHAT.append(xhat)
    PHAT.append(np.diag(Phat))
    Z.append(z)
    ZHAT.append(zhat)
    SBAR.append(np.diag(S))
    ACMD.append(a_cmd_b)
    TIME.append(t)
    POST.append(rT)
    POSM.append(rM)
    
    # 다음 단계를 위한 준비
    rM0, vM0, rT0, vT0, a_cmd0 = rM, vM, rT, vT, a_cmd
    
    # 종료 조건
    if np.linalg.norm(rT - rM) < 5:
        break
